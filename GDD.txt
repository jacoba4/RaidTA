RaidTA

Concept
		The main endgame content of modern mmorpgs are multiplayer raids, where a group of players
	fight a series of bosses. Many guides and videos describing how to perform raids exist, however
	personally, I much prefer a more hands-on approach to learning. Since most raid groups only meet
	at specific times, practicing these fights and mechanics is difficult. RaidTA aims to provide a
	program where players can practice and visually see the mechanics of raids without having to 
	gather upwards of 19 other players.
	
		For now, raids will be taken from existing raids in World of Warcraft. In the future I may decide
	to take a more "gamified" route and create my own raids.
	
		Other future goals include choosing specific classes (warrior, mage, priest, etc.) which have specific
	and unique abilites.

Gameplay
		The player will be given a top down view of the raid. From this view, the player can see all the
	members of the raid (controlled by cpu), the boss(es), and all mechanics that are happening. There are
	two possible, closely related, paths that the game can take from here.
		
		Either the player controls only their character and handles their one role (tank, damage, heal) or
	the player controls the entire raid (with extremely simplified gameplay mechanics related to WoW).
	
		Single Control
			- More specific for that role
			- Requires much more ai so the other raid members perform their role perfectly
			- Probably much easier to implement once Raid Control is implemented
		
		Raid Control
			- Better for Raid Leaders to help manage their raid team
			- Easier to implement, as less ai is needed
			- Leads to a potential more "gamified" program
			
		I will begin with Raid Control and depending on progress will continue onto Single Control

	Controls
		Single Control
			- TBD
			
		Raid Control
			- Player can select the character they want via keyboard buttons. Ex: 1-8 for an 8 person raid.
				If the fights get scaled to real size, brainstorm better control schemes.
				
			- If no outside input occurs, the character will do one of three things based on role
				- Damage: continue attacking the targeted enemy
				- Heal: heal injured party members that are within range
				- Tank: continue attacking the targeted enemy
				
			- If the player clicks and drags
				- Release on ground: character will move to the specified location and resume their
					idle action (defined above)
				- Release on enemy: if the character is a tank or damage, this sets their target to this enemy.
					if a healer, then moves.
				
			
			- If the player right clicks on the character, they will perform their cooldown ability
				- Tank: Mitigation cooldown. Prevents a percentage of damage taken. Commonly used when the
					boss is about to use an important ability
				- Healer: heavy raid-wide healing. Typically used when the raid takes large amounts of damage
				- Melee Damage: heavy single target damage to the targeted enemy
				- Ranged Damage: heavy area of effect (aoe) damage centered on the target

Art
	Characters/Enemies
		Super simple art. Role icons for player characters and simple portraits for enemies.
	
		Examples:
			- Player Characters: https://ih1.redbubble.net/image.413287082.4003/flat,750x1000,075,f.u2.jpg 
			- Boss: https://iphone-image.apkpure.com/v2/app/4/1/a/41a44ede52cd7d71d31b8a5ffa6d7367.jpg
			
	UI
		Honestly just what unreal has default. Art is not my priority as I have no artistic skills :)
		Cast bar for Boss/Adds might be nice however.
		Also timer bars could be helpful for learning.
				
	Environment
		Minimal of what is needed to convey mechanics
		
		Example (Even simpler than this) - https://wow.zamimg.com/uploads/screenshots/normal/877091.jpg
		
Audio
	Initally None.
	Later could add Raid Warnings (Horns, Sirens, etc.) to notifty of important mechanics
	Also Later if I feel spicy add sword swings, magic fizzes, clangs, etc.
		
AI
	Player Characters:
		- Move to point
		- Attack current target on timer
				or
		- Heal party member
			- Experiment here with what feels best
			- For now priority is
				- Low Health Tank
				- Low Health Damage
				- Injured Tank
				- Injured Damage
	
	NPC:
		This is where it gets more complicated
		Off the top of my head, best way is to do the following as to not overload the Boss with functions. 
		
		Boss:
			- Handle just the boss character
			- Attack, cast, move, etc.
			- Timings for these are based on timers in Encounter
			- Essentially the boss is a Smaller Enemy (Add) with more functions
		
		Smaller Enemies (Adds):
			- Handle just themselves
			- Depends on fight
			- Examples: Attack nearest enemy, attack enemy with highest threat (simplify this to change target to 
				tank if a tank attacks them)
		
		Encounter:
			- Handle timers (ex: every 90 seconds) and milestones (ex: boss reached 50% hp)
			- Notify Boss(es)/Adds of when to perform other things
			- Handle all overall mechanics/events
			- New enemies being spawned
			- Large raid-wide events (ex: Large damage, room change, etc.)


Code Layout
(This is only initial, definitely going to change)
	Encounter
		Keep track of and references to essentially everything
		
		Variables
			raid_array: Keeps pointers to PC classes
			boss_array: Keeps pointers to Boss classes
			add_array: Keeps pointers to NPC classes
			start_time: Time encounter started
			current_time: I'm assuming Unreal has something to keep track of this
			current_encounter: current.....encounter
			
			
		Functions
			BeginEncounter(int encounter_number)
				Sets up the room, bosses, adds, players, etc.
				Look into Unreal's version of ScriptableObjects
				Sets start_time
			
			Tick() (just like unity Update())
				check timers
			
			EndEncounter()
				cleans everything up
	

	Unit
	PC, NPC, Boss(?) will be polymorphisms of this class since they share many functions
		Variables
			max_hp: max health
			hp: current health
			is_healer: determines if should damage or heal
			damage: amount of damage each attack
			attack_speed: number of frames between each attack (ex: 5 attacks when time%5 = 0)
			has_command: 1 if player inputted command else 0
			target_destination: location to move to. stored as FVector (Unreal version of Vector3)
			current_target: (NPC class?) the current target


		Functions
			Tick()
				calls check_target
					if damage, checks if target hp is <= 0 then (DECIDE HERE) either switches to nearest target or waits until new target is selected
					could also switch to previous target? maybe a combination of all of these?
					
					if healer, call heal_ai()
					
				check when to attack, if time to attack, call Attack()
					if (is_healer) should call heal instead. Could use Attack with a negative value but :shrug:
			
			Attack()
				calls current_target's Damage(int damage)
			
			Heal()
				only ends up being called if is_healer
				calls current_target's Restore(int heal)
				
			Damage(int damage)
				hp -= damage
				if hp <= 0 call Die()
			
			Restore(int heal)
				hp = min(max_hp, hp+heal)
				can't go above max. could change later if i want to add shields
				
			Die()
				override everything. unit greys out and does nothing (until rezzed?)
			
			HealAI()
				EXTREMELY PRELIMINARY
				Calls a function from Encounter that finds the lowest hp target of that type (players vs NPCs)
				and returns an Actor/Pawn/Component?
					
				
		
		Polymorphisms
			PC
				Also contains player input
			NPC
				Also contains encounter input
				
		
			